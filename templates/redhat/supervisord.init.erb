#!/bin/bash
#
# supervisord   This scripts turns supervisord on
#
# Author:       Mike McGrath <mmcgrath@redhat.com> (based off yumupdatesd)
#               Jason Koppe <jkoppe@indeed.com> adjusted to read sysconfig,
#                   use supervisord tools to start/stop, conditionally wait
#                   for child processes to shutdown, and startup later
#
#               Adapted from https://github.com/Supervisor/initscripts/blob/73ef8a0482d90d550e802565f83896ca460e8afe/redhat-init-mingalevme
#               small amount of changes have been made from original script.
#
# chkconfig:    345 83 04
#
# description:  supervisor is a process control utility.  It has a web based
#               xmlrpc interface as well as a few other nifty features.
# processname:  supervisord
# config: /etc/supervisord.conf
# pidfile: /var/run/supervisord.pid
#

# source function library
. /etc/rc.d/init.d/functions

SUPERVISORCTL=<%= @node['supervisor']['supervisorctl_location'] %>
SUPERVISORD=<%= @node['supervisor']['supervisord_location'] %>

# should probably put both of these options as runtime arguments
OPTIONS="-c /etc/supervisord.conf"
PIDFILE=/var/run/supervisord.pid

# unset this variable if you don't care to wait for child processes to shutdown before removing the /var/lock/subsys/supervisord lock
WAIT_FOR_SUBPROCESSES=yes

# remove this if you manage number of open files in some other fashion
ulimit -n 96000

RETVAL=0

start() {
    echo "Starting supervisord: "
    if [ -e $PIDFILE ]; then
        echo "ALREADY STARTED"
        return 1
    fi

    $SUPERVISORD $OPTIONS

    # show initial startup status
    $SUPERVISORCTL $OPTIONS status

    # only create the subsyslock if we created the PIDFILE
    [ -e $PIDFILE ] && touch /var/lock/subsys/supervisord
}

stop() {
    echo -n "Stopping supervisord: "
    $SUPERVISORCTL $OPTIONS shutdown
    if [ -n "$WAIT_FOR_SUBPROCESSES" ]; then
        echo "Waiting roughly 60 seconds for $PIDFILE to be removed after child processes exit"
        for sleep in  2 2 2 2 4 4 4 4 8 8 8 8 last; do
            if [ ! -e $PIDFILE ] ; then
                echo "Supervisord exited as expected in under $total_sleep seconds"
                break
            else
                if [[ $sleep -eq "last" ]] ; then
                    echo "Supervisord still working on shutting down. We've waited roughly 60 seconds, we'll let it do its thing from here"
                    return 1
                else
                    sleep $sleep
                    total_sleep=$(( $total_sleep + $sleep ))
                fi

            fi
        done
    fi

    # always remove the subsys.  we might have waited a while, but just remove it at this point.
    rm -f /var/lock/subsys/supervisord
}

restart() {
        stop
        start
}

case "$1" in
    start)
        start
        RETVAL=$?
        ;;
    stop)
        stop
        RETVAL=$?
        ;;
    restart|force-reload)
        restart
        RETVAL=$?
        ;;
    reload)
        $SUPERVISORCTL $OPTIONS reload
        RETVAL=$?
        ;;
    condrestart)
        [ -f /var/lock/subsys/supervisord ] && restart
        RETVAL=$?
        ;;
    status)
        $SUPERVISORCTL status
        RETVAL=$?
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|reload|force-reload|condrestart}"
        exit 1
esac

exit $RETVAL
